import rx.lang.scala.Observable

val s = Observable.from(List(1,2,3,4)).toBlocking.toIterable.map(i => i + 1)


////val p = Puzzle()
////p.cells
////p.setCell(Loc(1,1),1)
////  .setCell(Loc(1,2),2)
////  .setCell(Loc(1,3),3)
////  .setCell(Loc(2,1),4)
////  .setCell(Loc(2,2),5)
////  .setCell(Loc(2,3),6)
////  .setCell(Loc(3,1),7)
////  .setCell(Loc(3,2),8)
////  .setCell(Loc(4,3),1)
////  .setCell(Loc(4,1),2)
////  .setCell(Loc(4,2),3)
////  .setCell(Loc(5,1),5)
////  .setCell(Loc(5,2),4)
////  .setCell(Loc(5,3),7)
//val p = Puzzle()
////Puzzle.setSingleCell(p, Loc(1,1),1)
////val (p1, toSet1) = p.setCell2(Loc(1,1), 1)
////val (p2, toSet2) = p1.setCell2(Loc(1,2), 2)
////val (p3, toSet3) = p2.setCell2(Loc(1,3), 3)
////val (p4, toSet4) = p3.setCell2(Loc(2,1), 4)
////val (p5, toSet5) = p4.setCell2(Loc(2,2), 5)
////val (p6, toSet6) = p5.setCell2(Loc(2,3), 6)
////val (p7, toSet7) = p6.setCell2(Loc(3,1), 7)
////val (p8, toSet8) = p7.setCell2(Loc(3,2), 8)
////val (p9, toSet) = p.setCell2(Loc(1,1), 1)
////p setSingleCell (Loc(1,1), 1) setDepCells (Loc(1,1), 1)
//p.setCellRecur(Loc(1,1), 1)
//  .setCellRecur(Loc(1,2), 2)
//  .setCellRecur(Loc(1,3), 3)
//  .setCellRecur(Loc(2,1), 4)
//  .setCellRecur(Loc(2,2), 5)
//  .setCellRecur(Loc(2,3), 6)
//  .setCellRecur(Loc(3,1), 7)
//  .setCellRecur(Loc(3,2), 8)
////  .setCellRecur(Loc(3,2), 2)
